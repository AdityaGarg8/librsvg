# -*- indent-tabs-mode: nil -*-

variables:
  # Container(OCI) images for various distros

  AMD64_FEDORA_LATEST:       "registry.gitlab.gnome.org/gnome/librsvg-oci-images/amd64/fedora:latest"
  AMD64_OPENSUSE_TUMBLEWEED: "registry.gitlab.gnome.org/gnome/librsvg-oci-images/amd64/opensuse:tumbleweed"
  AMD64_DEBIAN_TESTING:      "registry.gitlab.gnome.org/gnome/librsvg-oci-images/amd64/debian:testing"

  LIBRSVG_DEBUG: "yes"
  # Turn compiler warnings into errors
  RUSTFLAGS: '-D warnings'

image: $AMD64_OPENSUSE_TUMBLEWEED

stages:
  - check
  - build
  - lint
  - unit test
  - acceptance test
  - cross distro
  - release
  - docs

default:
  interruptible: true

.cache:
  variables:
    # Only stuff inside the repo directory can be cached
    # Override the CARGO_HOME variable to force its location
    CARGO_HOME: "${CI_PROJECT_DIR}/cargo_cache"
  before_script:
    - mkdir -p cargo_cache
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      # Rust cache
      # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
      - cargo_cache/bin
      - cargo_cache/registry/index
      - cargo_cache/registry/cache
      - cargo_cache/git/db
    policy: pull

.cache_push:
  extends: .cache
  after_script:
    # Fix up ownership of the cache, not all builds use sudo
    - sudo chown -R "$(id -u):$(id -g)" ${CI_PROJECT_DIR}/cargo_cache
  cache:
    policy: pull-push

check:
  stage: check
  extends: '.cache_push'
  needs: []
  script:
    - sudo -E cargo check --all-targets

fmt:
  stage: lint
  extends: '.cache'
  needs:
    - job: check
  script:
    - sudo -E cargo fmt --all -- --check

clippy:
  stage: lint
  extends: '.cache'
  needs:
    - job: check
  script:
    - cargo clippy --version
    - gitlab-clippy --version
    - sudo -E cargo clippy
  after_script:
    - sudo -E cargo clippy --message-format=json | /opt/cargo/bin/gitlab-clippy -o gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'

cargo_test:
  stage: unit test
  extends:
    # Tests require extra crates, hence cache is pushed
    - .cache_push
  needs:
    - job: check
  artifacts:
    when: 'on_failure'
    paths:
      - _build/tests/output
    expire_in: 1 day
  variables:
    OUT_DIR: "${CI_PROJECT_DIR}/tests/output"
  script:
    - sudo -E cargo test -- --skip loading_crash --skip reference --skip render_crash

coverage:
  image: "rustlang/rust:nightly-bullseye"
  stage: unit test
  needs:
    - job: check
      artifacts: false
  variables:
    RUSTFLAGS: "-Zinstrument-coverage"
    RUSTDOCFLAGS: "-Zinstrument-coverage"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  before_script:
    - apt update && apt install -y --no-install-recommends libgdk-pixbuf2.0-dev libpango1.0-dev libcairo2-dev
    - rustup component add llvm-tools-preview
    - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
  script:
    - cargo +nightly test --no-fail-fast || true
  after_script:
    - ./grcov . --binary-path ./target/debug/ -s . -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o coverage.xml
    - grep -Eo 'line-rate="[^"]+"' coverage.xml | head -n 1 | grep -Eo '[0-9.]+' | awk '{ print "Coverage:", $1 * 100 }'
  coverage: '/Coverage: \d+\.\d+/'
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      cobertura: coverage.xml

cargo_bench:
  stage: unit test
  needs:
    - job: check
  script: |
    BENCHES=("box_blur" "composite" "lighting" "path_parser" "pixbuf_from_surface" "pixel_iterators" "pixel_ops" "srgb" "surface_from_pixbuf")
    sudo -E git checkout ${CI_DEFAULT_BRANCH}
    for BENCH in "${BENCHES[@]}"
    do
      sudo -E cargo bench --bench $BENCH -- --noplot --save-baseline main
    done
    sudo -E git checkout ${CI_COMMIT_SHA}
    for BENCH in "${BENCHES[@]}"
    do
      sudo -E cargo bench --bench $BENCH -- --noplot --baseline main
    done
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      when: manual
      allow_failure: true
  artifacts:
    paths:
      - target/criterion
    expire_in: 1 week

.make:
  extends: '.cache'
  needs:
    - job: cargo_test
  script:
    - mkdir -p _build
    - cd _build
    - sudo ../autogen.sh --enable-vala
    - sudo -E make
    - sudo -E make check
  artifacts:
    when: 'on_failure'
    paths:
      - _build/tests/*.log
      - _build/tests/output
    expire_in: 1 day
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

opensuse:tumbleweed:
  stage: acceptance test
  extends:
    - .make
    # make check runs extra tests that require extra crates, hence cache is pushed
    - .cache_push
  before_script:
    - sudo zypper install -y python38-docutils python3-gi-docgen
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

.distro:
  stage: cross distro
  extends: .make
  variables:
    LIBRSVG_DEBUG: "no"

fedora:latest:
  image: $AMD64_FEDORA_LATEST
  extends: .distro

debian:testing:
  image: $AMD64_DEBIAN_TESTING
  extends: .distro
  script:
    # TODO: delete after sudo is no longer needed on the other builds
    - mkdir -p _build
    - cd _build
    - ../autogen.sh --enable-vala
    - make
    - make check
  allow_failure: true

msys2-mingw64:
  stage: acceptance test
  tags:
    - win32-ps
  variables:
    MSYSTEM: "MINGW64"
    CHERE_INVOKING: "yes"
  script:
    - C:\msys64\usr\bin\pacman --noconfirm -Syyuu
    - C:\msys64\usr\bin\bash -lc "bash -x ./.gitlab-ci/test-msys2.sh"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

distcheck:
  stage: release
  extends: .distro
  variables:
    DESTDIR: "/tmp/distcheck"
  script:
    - sudo ./autogen.sh --enable-vala
    - sudo -E make
    - sudo -E make distcheck
  artifacts:
    when: 'on_success'
    paths:
      - librsvg-*.tar.xz
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

reference:
  extends: '.cache'
  stage: docs
  needs:
    - job: opensuse:tumbleweed
  before_script:
    - sudo zypper install -y python38-docutils python3-gi-docgen
  script:
    - mkdir -p _build
    - cd _build
    - sudo ../autogen.sh --enable-vala
    - sudo -E make
    - cd ..
    - mkdir -p public/
    - sudo mv _build/doc/Rsvg-2.0 public/
  artifacts:
    paths:
      - public

pages:
  stage: docs
  extends: '.cache'
  needs:
    - job: reference
  script:
    - mkdir -p public/internals
    - sudo -E cargo doc --document-private-items --no-deps
    - cp -r target/doc/* public/internals
    - mkdir -p public/doc
    - sudo -E cargo doc --no-deps --lib
    - cp -r target/doc/* public/doc
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
