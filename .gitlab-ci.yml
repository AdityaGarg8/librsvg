# -*- indent-tabs-mode: nil -*-

variables:
  # Container(OCI) images for various distros

  AMD64_FEDORA_LATEST:       "registry.gitlab.gnome.org/gnome/librsvg-oci-images/amd64/fedora:latest"
  AMD64_OPENSUSE_TUMBLEWEED: "registry.gitlab.gnome.org/gnome/librsvg-oci-images/amd64/opensuse:tumbleweed"
  AMD64_DEBIAN_TESTING:      "registry.gitlab.gnome.org/gnome/librsvg-oci-images/amd64/debian:testing"

  LIBRSVG_DEBUG: "yes"

image: $AMD64_OPENSUSE_TUMBLEWEED

stages:
  - check
  - build
  - lint
  - unit test
  - acceptance test
  - cross distro
  - release
  - docs

.global_before: &global_before
  - rustc --version
  - cargo --version
  # Set up Rust cache
  - mkdir -p cargo_cache

.common:
  interruptible: true
  variables:
    # Only stuff inside the repo directory can be cached
    # Override the CARGO_HOME variable to force its location
    CARGO_HOME: "${CI_PROJECT_DIR}/cargo_cache"
  before_script:
    - *global_before
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      # Rust cache
      # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
      - cargo_cache/bin
      - cargo_cache/registry/index
      - cargo_cache/registry/cache
      - cargo_cache/git/db
    policy: pull

.recreate_cache:
  after_script:
    # Fix up ownership of the cache, not all builds use sudo
    - sudo chown -R "$(id -u):$(id -g)" ${CI_PROJECT_DIR}/cargo_cache
  cache:
    policy: pull-push

check:
  stage: check
  extends:
    - .common
    - .recreate_cache
  needs: []
  script:
    - sudo -E cargo check --workspace

fmt:
  stage: lint
  extends: .common
  needs:
    - job: check
  script:
    - sudo -E cargo fmt --all -- --check

clippy:
  stage: lint
  extends: .common
  needs:
    - job: check
  script:
    - cargo clippy --version
    - sudo -E cargo clippy --workspace

cargo_test:
  stage: unit test
  extends:
    - .common
    # Tests require extra crates, hence cache is recreated
    - .recreate_cache
  needs:
    - job: check
  artifacts:
    when: 'on_failure'
    paths:
      - _build/tests/output
    expire_in: 1 day
  variables:
    OUT_DIR: "${CI_PROJECT_DIR}/tests/output"
  script:
    - sudo -E cargo test --package librsvg --package librsvg_c_api --package rsvg_internals

.make:
  stage: cross distro
  extends:
    - .common
  needs:
    - job: cargo_test
  script:
    - mkdir -p _build
    - cd _build
    - sudo ../autogen.sh --enable-gtk-doc --enable-vala
    - sudo -E make
    - sudo -E make check
  artifacts:
    when: 'on_failure'
    paths:
      - _build/tests/*.log
      - _build/tests/output
    expire_in: 1 day
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

opensuse:tumbleweed:
  stage: acceptance test
  extends:
    - .make
    # make check runs extra tests that require extra crates, hence recreate cache
    - .recreate_cache
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

fedora:latest:
  image: $AMD64_FEDORA_LATEST
  extends: .make

debian:testing:
  image: $AMD64_DEBIAN_TESTING
  extends: .make
  script:
    # TODO: delete after sudo is no longer needed
    - mkdir -p _build
    - cd _build
    - ../autogen.sh --enable-gtk-doc --enable-vala
    - make
    - make check

distcheck:
  extends: .make
  stage: release
  variables:
    DESTDIR: "/tmp/distcheck"
  script:
    - sudo ./autogen.sh --enable-gtk-doc --enable-vala
    - sudo -E make
    - sudo -E make distcheck
  artifacts:
    when: 'on_success'
    paths:
      - librsvg-*.tar.xz
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

pages:
  stage: docs
  extends: .common
  script:
    - mkdir -p public/doc
    - sudo -E cargo doc --document-private-items --no-deps
    - cp -r target/doc/* public/doc
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
