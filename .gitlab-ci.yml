# -*- indent-tabs-mode: nil -*-

stages:
  - test
  - lint

.test_template: &distro_test
  stage: test
  script:
    - rustc --version && cargo --version
    - ./autogen.sh --enable-debug
    - make check
  after_script:
    - mkdir png_artifacts
    - cp /tmp/*.png png_artifacts

  artifacts:
    when: on_failure
    paths:
      - tests/*.log
      - png_artifacts


fedora:test:
  image: fedora:latest
  before_script:
    - dnf install -y gcc rust rust-std-static cargo make
                     automake autoconf libtool gettext itstool
                     gtk-doc
                     git redhat-rpm-config
                     gobject-introspection-devel
                     libxml2-devel
                     libcroco-devel
                     cairo-devel
                     pango-devel
                     gdk-pixbuf2-devel
                     gtk3-devel
  <<: *distro_test

opensuse:test:
  image: opensuse:tumbleweed
  before_script:
    - zypper install -y gcc rust rust-std cargo make
                     automake autoconf libtool gettext itstool
                     gtk-doc
                     git
                     gobject-introspection-devel
                     libxml2-devel
                     libcroco-devel
                     cairo-devel
                     pango-devel
                     gdk-pixbuf-devel
                     gtk3-devel
  <<: *distro_test
  only:
    refs:
      - master
      - schedules
      - tags
      - web

# Configure and run rustfmt on nightly
# Exits and builds fails if on bad format
rustfmt:
  image: "rustlang/rust:nightly"
  stage: lint
  variables:
    CFG_RELEASE_CHANNEL: "nightly"
  script:
  - rustc --version && cargo --version
  - cd rust/
  - cargo install rustfmt-nightly --force
  - cargo fmt --all -- --write-mode=diff
  when: manual

# Configure and run clippy on nightly
# Only fails on errors atm.
clippy:
  image: "rustlang/rust:nightly"
  stage: lint
  script:
  - rustc --version && cargo --version
  - cd rust/
  - cargo install clippy --force
  - cargo clippy --all
  when: manual
