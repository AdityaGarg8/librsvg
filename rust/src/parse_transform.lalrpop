//-*- rust -*-
//
// This parser is for the "transform" attribute in SVG.
// Its operataion and grammar are described here:
// https://www.w3.org/TR/SVG/coords.html#TransformAttribute

use std::f64::consts::*;
use std::str::FromStr;

use pt::cairo;
use pt::cairo::MatrixTrait;

grammar;

pub TransformList: cairo::Matrix = {
    // Note that the grammar in https://www.w3.org/TR/SVG/coords.html#TransformAttribute
    // has this:
    //
    //   transforms:
    //     transform
    //     | transform comma-wsp+ transforms
    //
    // I think the "comma-wsp+" should really be "comma-wsp" as in the
    // rest of the SVG grammar.  Here we will use our usual "comma?" and
    // hope that the SVG test suite catches errors in our grammar.
    <a: TransformList> comma? <b: Transform> => cairo::Matrix::multiply (&b, &a),
    Transform
};

Transform: cairo::Matrix = {
    Matrix,
    Translate,
    Scale,
    Rotate,
    SkewX,
    SkewY
};

pub Matrix: cairo::Matrix = "matrix" "(" <Num> <Num2> <Num2> <Num2> <Num2> <Num2> ")" =>
    cairo::Matrix::new (<>);

pub Translate: cairo::Matrix = {
    "translate" "(" <Num> ")" => cairo::Matrix::new (1.0, 0.0, 0.0, 1.0, <>, 0.0),
    "translate" "(" <Num> <Num2> ")" => cairo::Matrix::new (1.0, 0.0, 0.0, 1.0, <>)
};

pub Scale: cairo::Matrix = {
    "scale" "(" <Num> ")" => cairo::Matrix::new (<>, 0.0, 0.0, <>, 0.0, 0.0),
    "scale" "(" <sx: Num> <sy: Num2> ")" => cairo::Matrix::new (sx, 0.0, 0.0, sy, 0.0, 0.0),
};

pub Rotate: cairo::Matrix = {
    "rotate" "(" <angle: Num> ")" => {
        let a = angle * PI / 180.0;
        let (s, c) = a.sin_cos ();
        cairo::Matrix::new (c, s, -s, c, 0.0, 0.0)
    },

    "rotate" "(" <angle: Num> <tx: Num2> <ty: Num2> ")" => {
        let a = angle * PI / 180.0;
        let (s, c) = a.sin_cos ();
        let mut m = cairo::Matrix::new (1.0, 0.0, 0.0, 1.0, tx, ty);

        m = cairo::Matrix::multiply (&cairo::Matrix::new (c, s, -s, c, 0.0, 0.0), &m);
        m = cairo::Matrix::multiply (&cairo::Matrix::new (1.0, 0.0, 0.0, 1.0, -tx, -ty), &m);
        m
    }
};

pub SkewX: cairo::Matrix = {
    "skewX" "(" <angle: Num> ")" => {
        let a = angle * PI / 180.0;
        cairo::Matrix::new (1.0,      0.0,
                            a.tan (), 1.0,
                            0.0, 0.0)
    }
};

pub SkewY: cairo::Matrix = {
    "skewY" "(" <angle: Num> ")" => {
        let a = angle * PI / 180.0;
        cairo::Matrix::new (1.0,  a.tan (),
                            0.0,  1.0,
                            0.0, 0.0)
    }
};

pub Num2: f64 = {
    comma? <Num>
};

pub Num: f64 = <s:r"[+-]?([0-9]*\.[0-9]+|[0-9]+(\.[0-9]*)?)([Ee][+-]?[0-9]+)?"> =>
    f64::from_str (s).unwrap ();

comma: () = ",";
